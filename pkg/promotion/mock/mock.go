// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/readr-media/readr-restful/pkg/promotion (interfaces: DataLayer)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	promotion "github.com/readr-media/readr-restful/pkg/promotion"
	reflect "reflect"
)

// MockDataLayer is a mock of DataLayer interface
type MockDataLayer struct {
	ctrl     *gomock.Controller
	recorder *MockDataLayerMockRecorder
}

// MockDataLayerMockRecorder is the mock recorder for MockDataLayer
type MockDataLayerMockRecorder struct {
	mock *MockDataLayer
}

// NewMockDataLayer creates a new mock instance
func NewMockDataLayer(ctrl *gomock.Controller) *MockDataLayer {
	mock := &MockDataLayer{ctrl: ctrl}
	mock.recorder = &MockDataLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataLayer) EXPECT() *MockDataLayerMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockDataLayer) Count(arg0 promotion.ListParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockDataLayerMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDataLayer)(nil).Count), arg0)
}

// Delete mocks base method
func (m *MockDataLayer) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDataLayerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataLayer)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockDataLayer) Get(arg0 promotion.ListParams) ([]promotion.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]promotion.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDataLayerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataLayer)(nil).Get), arg0)
}

// Insert mocks base method
func (m *MockDataLayer) Insert(arg0 promotion.Promotion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockDataLayerMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDataLayer)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockDataLayer) Update(arg0 promotion.Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDataLayerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataLayer)(nil).Update), arg0)
}
